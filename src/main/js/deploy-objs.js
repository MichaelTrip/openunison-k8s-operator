function generate_amq_secrets() {
    print("generate the amq keystore");

    amqKS = Java.type("java.security.KeyStore").getInstance("PKCS12");
    amqKS.load(null,ksPassword.toCharArray());

    print("trusting the amq client cert");
    amqKS.setCertificateEntry('trusted-amq-client',ouKs.getCertificate('amq-client'));

    secret_response = k8s.callWS("/api/v1/namespaces/" + k8s_namespace + "/secrets/orchestra-amq-server","",-1);

    if (secret_response.code != 200) {
        print("Secret orchestra-amq-server does not exist, make sure it is defined in your openunison custom resource");
        return false;
    } else {
        //store tls secret into keystore
        secret_json = JSON.parse(secret_response.data);
        CertUtils.importKeyPairAndCert(amqKS,ksPassword,"broker",secret_json.data["tls.key"],secret_json.data["tls.crt"]);

        existing_amq_secret = k8s.callWS('/api/v1/namespaces/' + k8s_namespace + '/secrets/amq-secrets-' + k8s_obj.metadata.name,"",-1);

        if (existing_amq_secret.code == 200) {
            print("AMQ is already deployed");
            var existing_amq_secret_json = JSON.parse(existing_amq_secret.data);
            var existing_ks_b64 = existing_amq_secret_json.data["amq.p12"];

            var keystores_same = false;
            var existing_ks = CertUtils.decodeKeystore(existing_ks_b64,ksPassword);

            if (existing_ks != null) {
                keystores_same = CertUtils.keystoresEqual(existing_ks,amqKS,ksPassword);
            }

            if (keystores_same) {
                print("No changes to AMQ secret");
                amq_secrets_changed = false;
            } else {
                secret_patch = {
                    "data":{
                        "amq.p12":CertUtils.encodeKeyStore(amqKS,ksPassword)
                    }
                };

                k8s.patchWS('/api/v1/namespaces/' + k8s_namespace + '/secrets/amq-secrets-' + k8s_obj.metadata.name,JSON.stringify(secret_patch));
                amq_secrets_changed = true;
            }
        } else {
            print("Create activemq config secret");

            var amq_xml = "";

            //if using sql server, need a different config
            if (inProp['OU_JDBC_DRIVER'] === 'com.microsoft.sqlserver.jdbc.SQLServerDriver') {
                amq_xml = "";
            }

            amqFileSecrets = {
            "apiVersion":"v1",
                "kind":"Secret",
                "type":"Opaque",
                "metadata": {
                    "name":"amq-secrets-" + k8s_obj.metadata.name,
                },
                "data":{
                "activemq.xml": amq_xml,
                "amq.p12":CertUtils.encodeKeyStore(amqKS,ksPassword)
                }
            }

            k8s.postWS('/api/v1/namespaces/' + k8s_namespace + '/secrets',JSON.stringify(amqFileSecrets));

        }

        print("Create activemq env var secret");

        string_for_hash = inProp['OU_JDBC_DRIVER'] + inProp['OU_JDBC_URL'] + inProp['OU_JDBC_USER'] + inProp['OU_JDBC_PASSWORD'] + ksPassword;
        bytes_for_hash = string_for_hash.getBytes("UTF-8");

        digest = java.security.MessageDigest.getInstance("SHA-256");
        digest.update(bytes_for_hash,0,bytes_for_hash.length);
        digest_bytes = digest.digest();
        digest_base64 = java.util.Base64.getEncoder().encodeToString(digest_bytes);

        existing_amq_secret = k8s.callWS('/api/v1/namespaces/' + k8s_namespace + '/secrets/amq-env-secrets-' + k8s_obj.metadata.name,"",-1);

        if (existing_amq_secret.code == 200) {
            var existing_amq_secret_data = JSON.parse(existing_amq_secret.data);
            

            digest_from_secret = null;
            
            if (existing_amq_secret_data.metadata["annotations"] != null) {
                digest_from_secret = existing_amq_secret_data.metadata.annotations["tremolo.io/digest"];
            }

            if (digest_from_secret !== digest_base64) {
                secret_patch = {
                    "metadata": {
                        "annotations":{
                            "tremolo.io/digest": digest_base64
                        }
                    },
                    "data":{
                        "JDBC_DRIVER":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_DRIVER'].getBytes("UTF-8")),
                        "JDBC_URL":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_URL'].getBytes("UTF-8")),
                        "JDBC_USER":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_USER'].getBytes("UTF-8")),
                        "JDBC_PASSWORD":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_PASSWORD'].getBytes("UTF-8")),
                        "TLS_KS_PWD":java.util.Base64.getEncoder().encodeToString(ksPassword.getBytes("UTF-8"))
                    }
                };

                print("Updating amq env vars secret");
                k8s.patchWS('/api/v1/namespaces/' + k8s_namespace + '/secrets/amq-env-secrets-' + k8s_obj.metadata.name,JSON.stringify(secret_patch));
                amq_env_secrets_changed = true;
            } else {
                print("No updates to amq env vars secret");
                amq_env_secrets_changed = false;
            }
        } else {

            amqEnvSecrets = {
            "apiVersion":"v1",
                "kind":"Secret",
                "type":"Opaque",
                "metadata": {
                    "name":"amq-env-secrets-" + k8s_obj.metadata.name,
                    "annotations":{
                        "tremolo.io/digest": digest_base64
                    }
                },
                "data":{
                "JDBC_DRIVER":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_DRIVER'].getBytes("UTF-8")),
                "JDBC_URL":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_URL'].getBytes("UTF-8")),
                "JDBC_USER":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_USER'].getBytes("UTF-8")),
                "JDBC_PASSWORD":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_PASSWORD'].getBytes("UTF-8")),
                "TLS_KS_PWD":java.util.Base64.getEncoder().encodeToString(ksPassword.getBytes("UTF-8"))
                }
            }

            k8s.postWS('/api/v1/namespaces/' + k8s_namespace + '/secrets',JSON.stringify(amqEnvSecrets));

        }

        return true;
    }
}
function create_activemq() {
    if (! secret_data_changed) {
        print("No changes to the secrets, no need to redeploy");
        return;
    }

    if (! generate_amq_secrets()) {
        return;
    }


        
        amq_service = {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "labels": {
                    "app": "amq",
                    "operated-by": "openunison-operator"
                },
                "name": "amq",
                "namespace": k8s_namespace
            },
            "spec": {
                "ports": [
                    {
                        "name": "amq-openwire",
                        "port": 61616,
                        "protocol": "TCP",
                        "targetPort": 61616
                    },
                    {
                        "name": "amq-admin",
                        "port": 8162,
                        "protocol": "TCP",
                        "targetPort": 8162
                    }
                ],
                "selector": {
                    "app": "amq-" + k8s_obj.metadata.name
                },
                "sessionAffinity": "ClientIP",
                "sessionAffinityConfig": {
                    "clientIP": {
                        "timeoutSeconds": 10800
                    }
                },
                "type": "ClusterIP"
            }
        };

        k8s.postWS('/api/v1/namespaces/' + k8s_namespace + '/services',JSON.stringify(amq_service));


        if (isBuildOpenShift()) {
            deploy_amq_openshift();
        } else {
            deploy_k8s_activemq();
        }
        
    

    

}


function create_static_objects() {

    obj_resp = k8s.callWS('/api/v1/namespaces/' + k8s_namespace + '/serviceaccounts/openunison-' + k8s_obj.metadata.name,null, 0 );

    if (obj_resp.code == 200) {
        System.out.println("ServiceAccount exists, skipping");
    } else {
        System.out.println("Creating service account");
        obj = {"apiVersion":"v1","kind":"ServiceAccount","metadata":{"creationTimestamp":null,"name":"openunison-" + k8s_obj.metadata.name}};
        k8s.postWS('/api/v1/namespaces/' + k8s_namespace + '/serviceaccounts',JSON.stringify(obj)); 
    }

    obj_resp = k8s.callWS('/apis/rbac.authorization.k8s.io/v1/namespaces/' + k8s_namespace + '/roles/oidc-user-sessions-' + k8s_obj.metadata.name,null, 0);

    if (obj_resp.code == 200) {
        System.out.println("Role exists, skipping");
    } else {
        System.out.println("Creating Role");
        obj = {
            "kind": "Role",
            "apiVersion": "rbac.authorization.k8s.io/v1",
            "metadata": {
                "namespace": k8s_namespace,
                "name": "oidc-user-sessions-" + k8s_obj.metadata.name
            },
            "rules": [
                {
                    "apiGroups": [
                        "openunison.tremolo.io"
                    ],
                    "resources": [
                        "oidc-sessions",
                        "users"
                    ],
                    "verbs": [
                        "*"
                    ]
                }
            ]
        };

        k8s.postWS('/apis/rbac.authorization.k8s.io/v1/namespaces/' + k8s_namespace + '/roles',JSON.stringify(obj));
    }


    obj_resp = k8s.callWS('/apis/rbac.authorization.k8s.io/v1/namespaces/' + k8s_namespace + '/rolebindings/oidc-user-sessions-' + k8s_obj.metadata.name,null, 0);

    if (obj_resp.code == 200) {
        System.out.println("RoleBinding already exists, skipping");
    } else {
        System.out.println("Creating RoleBinding");

        obj = {
            "kind": "RoleBinding",
            "apiVersion": "rbac.authorization.k8s.io/v1",
            "metadata": {
                "name": "oidc-user-sessions-" + k8s_obj.metadata.name,
                "namespace": k8s_namespace
            },
            "subjects": [
                {
                    "kind": "ServiceAccount",
                    "name": "openunison-" + k8s_obj.metadata.name,
                    "namespace": k8s_namespace
                }
            ],
            "roleRef": {
                "kind": "Role",
                "name": "oidc-user-sessions-" + k8s_obj.metadata.name,
                "apiGroup": "rbac.authorization.k8s.io"
            }
        };
    
        k8s.postWS('/api/rbac.authorization.k8s.io/v1/namespaces/' + k8s_namespace + '/rolebindings',JSON.stringify(obj))
    }

    

    
    obj_resp = k8s.callWS('/api/v1/namespaces/' + k8s_namespace + '/services/openunison-' + k8s_obj.metadata.name,null, 0);
    
    if (obj_resp.code == 200) {
        System.out.println("Services already exists, skipping");
    } else {
        System.out.println("Building service");
        obj = {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "labels": {
                    "app": "openunison-" + k8s_obj.metadata.name,
                    "operated-by": "openunison-operator"
                },
                "name": "openunison-" + k8s_obj.metadata.name,
                "namespace": k8s_namespace
            },
            "spec": {
                "ports": [
                    {
                        "name": "openunison-secure-" + k8s_obj.metadata.name,
                        "port": 443,
                        "protocol": "TCP",
                        "targetPort": 8443
                    },
                    {
                        "name": "openunison-insecure-" + k8s_obj.metadata.name,
                        "port": 80,
                        "protocol": "TCP",
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "application": "openunison-" + k8s_obj.metadata.name
                },
                "sessionAffinity": "ClientIP",
                "sessionAffinityConfig": {
                    "clientIP": {
                        "timeoutSeconds": 10800
                    }
                },
                "type": "ClusterIP"
            },
            "status": {
                "loadBalancer": {}
            }
        };

        k8s.postWS('/api/v1/namespaces/' + k8s_namespace + '/services',JSON.stringify(obj));

    }
    if (isBuildOpenShift()) {
        deploy_openshift_objects();
    } else {
        if (k8s.isOpenShift()) {
            create_route();
        } else {
            create_ingress_objects(true);
        }
        
        create_k8s_deployment();
    }

    if (cfg_obj.enable_activemq) {
        create_activemq();
    }
    

    


    

}

function manageCertMgrJob() {
    //create controller for certs

    if (cfg_obj.key_store.update_controller == null) {
        print("WARNING: Not deploying the cert manager");
        return;
    }

    pathToExtraJS = System.getenv("EXTRA_JS");
    javascript = NetUtil.downloadFile('file://' + pathToExtraJS + '/cert-check.js');

    digest = java.security.MessageDigest.getInstance("SHA-256");
    digest.update(javascript.getBytes("UTF-8"),0,javascript.length);
    digest_bytes = digest.digest();
    digest_base64 = java.util.Base64.getEncoder().encodeToString(digest_bytes);

    is_update_job = false;

    res = k8s.callWS('/api/v1/namespaces/' + k8s_namespace + '/configmaps/cert-controller-js-' + k8s_obj.metadata.name,null,-1);
    if (res.code == 200) {
        currentJs = JSON.parse(res.data);
        currentJsDigest = currentJs.data.digest;

        if (currentJsDigest != digest_base64) {
            patch = {
                "data":{
                    "cert-check.js": javascript,
                    "diget" : digest_base64
                }
            }

            k8s.patchWS('/api/v1/namespaces/' + k8s_namespace + '/configmaps/cert-controller-js-' + k8s_obj.metadata.name,JSON.stringify(patch));
        }
    } else {
        jsCfgMap = {
            "apiVersion":"v1",
            "kind":"ConfigMap",
            "metadata":{
                "labels": {
                    "app": "openunison-" + k8s_obj.metadata.name,
                    "operated-by": "openunison-operator"
                },
                "name": "cert-controller-js-" + k8s_obj.metadata.name,
                "namespace": k8s_namespace
            },
            "data":{
                "cert-check.js": javascript,
                "diget" : digest_base64,
                "input.props":"",
                "deployment.yaml":""
            }
        };

        k8s.postWS('/api/v1/namespaces/' + k8s_namespace + '/configmaps',JSON.stringify(jsCfgMap));
    }

    resp = k8s.callWS('/apis/batch/v1beta1/namespaces/' + k8s_namespace + '/cronjobs/check-certs-' + k8s_obj.metadata.name,null,-1);

    if (resp.code == 200) {

        currentCronJob = JSON.parse(resp.data);

        if ("labels" in currentCronJob.metadata && "app.kubernetes.io/managed-by" in currentCronJob.metadata.labels && currentCronJob.metadata.labels["app.kubernetes.io/managed-by"] == "Helm") {
            System.out.println("CronJob exists and is managed by Helm, skipping");
            return;
        }

        run_patch = false;
        patch_image = false;
        patch = {};
        if (currentCronJob.spec.jobTemplate.spec.template.spec.containers[0].image != cfg_obj.key_store.update_controller.image) {
            run_patch = true;
            patch_image = true;
            patch = {
                "spec": {
                    "jobTemplate": {
                        "spec":{
                            "template":{
                                "spec": {
        
                                }
                            }
                        }
                    }
                }
            };
            patch.jobTemplate.spec.template.spec["containers"] = currentCronJob.spec.jobTemplate.spec.template.spec.containers;
            patch.jobTemplate.spec.template.spec.containers[0].image = cfg_obj.key_store.update_controller.image;
        }

        if (currentCronJob.spec.schedule != cfg_obj.key_store.update_controller.schedule) {
            run_patch = true;
            if (patch.spec == null) {
                patch["spec"] = {};
            }
            patch.spec["schedule"] = cfg_obj.key_store.update_controller.schedule;
        }

        if (Integer.parseInt(currentCronJob.spec.jobTemplate.spec.template.spec.containers[0].env[0].value) != cfg_obj.key_store.update_controller.days_to_expire) {
            run_patch = true;
            if (! patch_image) {
                patch = {
                    "spec":{
                        "jobTemplate": {
                            "spec":{
                                "template":{
                                    "spec": {
            
                                    }
                                }
                            }
                        }
                    }
                };
                patch.spec.jobTemplate.spec.template.spec["containers"] = currentCronJob.spec.jobTemplate.spec.template.spec.containers;
            }

            patch.spec.jobTemplate.spec.template.spec.containers[0].env[0].value = Integer.toString(cfg_obj.key_store.update_controller.days_to_expire);
        }

        if (run_patch) {
            print("Patching the cert cron job");
            print(JSON.stringify(patch));
            print(k8s.patchWS('/apis/batch/v1beta1/namespaces/' + k8s_namespace + '/cronjobs/check-certs-' + k8s_obj.metadata.name,JSON.stringify(patch))["data"]);
        } else {
            print("Not patching the job");
        }
    } else {



        checkCertsJob = {
            "apiVersion": "batch/v1beta1",
            "kind": "CronJob",
            "metadata": {
                "labels": {
                    "app": "openunison-" + k8s_obj.metadata.name,
                    "operated-by": "openunison-operator"
                },
                "name": "check-certs-" + k8s_obj.metadata.name,
                "namespace": k8s_namespace
            },
            "spec": {
            "schedule": cfg_obj.key_store.update_controller.schedule,
            "jobTemplate": {
                "spec": {
                "template": {
                    "spec": {
                    "containers": [
                        {
                        "name": "check-certs-" + k8s_obj.metadata.name,
                        "image": cfg_obj.key_store.update_controller.image,
                        "env": [
                            {
                                "name":"CERT_DAYS_EXPIRE",
                                "value": Integer.toString(cfg_obj.key_store.update_controller.days_to_expire)
                            }
                        ],
                        "command": ["java", "-jar", "/usr/local/artifactdeploy/artifact-deploy.jar",  "-extraCertsPath","/etc/extracerts","-installScriptURL", "file:///etc/input-maps/cert-check.js","-kubernetesURL","https://kubernetes.default.svc.cluster.local","-rootCaPath","/var/run/secrets/kubernetes.io/serviceaccount/ca.crt","-secretsPath","/etc/input-maps/input.props","-tokenPath","/var/run/secrets/kubernetes.io/serviceaccount/token","-deploymentTemplate","file:///etc/input-maps/deployment.yaml"],
                        "volumeMounts": [
                            {
                                "name":"extra-certs-dir",
                                "mountPath":"/etc/extracerts",
                                "readOnly":true
                            },
                            {
                                "name":"input-maps",
                                "mountPath":"/etc/input-maps",
                                "readOnly":true
                            }
                        ]
                        }
                    ],
                    "restartPolicy": "Never",
                    "serviceAccount": "openunison-operator",
                    "serviceAccountName": "openunison-operator",
                    "volumes": [
                        {
                            "name":"extra-certs-dir",
                            "configMap": {
                                "name": "cert-controller-js-" + k8s_obj.metadata.name
                            }
                        },
                        {
                            "name":"input-maps",
                            "configMap": {
                                "name": "cert-controller-js-" + k8s_obj.metadata.name
                            }
                        }
                    ]
                    }
                },
                "backoffLimit": 1
                }
            }
            }
        };

        print(k8s.postWS('/apis/batch/v1beta1/namespaces/' + k8s_namespace + '/cronjobs',JSON.stringify(checkCertsJob))["data"]);
    }
}